import os
from datetime import datetime

import requests
from lxml import html

from casemine.constants import MAIN_PDF_PATH
from juriscraper.OpinionSiteLinear import OpinionSiteLinear


class Site(OpinionSiteLinear):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.status = "Published"
        self.url="https://www.gas.uscourts.gov/search_vb/searchopinions2.aspx"
        self._opt_attrs = self._opt_attrs + ["associated_codes"] + ["associated_rules"]

        self.valid_keys.update({
            "associated_codes",
            "associated_rules"
        })
        self._all_attrs = self._req_attrs + self._opt_attrs

        for attr in self._all_attrs:
            self.__setattr__(attr, None)

    def _get_associated_codes(self):
        return self._get_optional_field_by_id("associated_codes")

    def _get_associated_rules(self):
        return self._get_optional_field_by_id("associated_rules")


    def _process_html(self) -> None:
        count = 0
        # print("inside process")
        for row in self.html.xpath(".//table[@class='DocumentGrid']//tr//td/table"):
            url = row.xpath(".//tr[1]//font/a/@href")[0]
            date =row.xpath(".//tr[2]//table//tr[2]//td[1]/text()")[0]
            docket = row.xpath(".//tr[2]//table//tr[2]//td[3]/text()")[0]
            judge = row.xpath(".//tr[2]//table//tr[2]//td[4]/text()")[0]
            name = f'In Re: {row.xpath(".//tr[2]//table//tr[2]//td[5]/text()")[0]}'
            try :
                summ = row.xpath(".//tr[3]//span/text()")[0]
            except: summ=""

            # print(url)
            # print(date)
            # print(docket)
            # print(judge)
            # print(name)
            # print(summ)
            #
            # print("_________________________________________")
            self.cases.append({
                "name": name,
                "url": url,
                "docket": [docket],
                "judge": [judge],
                "summary": summ,
                "date": date,
            })


    def crawling_range(self, start_date: datetime, end_date: datetime) -> int:
        year, month, day = str(start_date.date()).split('-')
        start = f"{month}%2F{day}%2F{year}"
        year, month, day = str(end_date.date()).split('-')
        end = f"{month}%2F{day}%2F{year}"

        headers={
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            , "Accept-Encoding": "gzip, deflate, br, zstd"
            , "Accept-Language": "en-US,en;q=0.5"
            , "Cache-Control": "no-cache"
            , "Connection": "keep-alive"
            # , "Content-Length": "1873"
            , "Content-Type": "application/x-www-form-urlencoded"
            , "Host": "www.gas.uscourts.gov"
            , "Origin": "https://www.gas.uscourts.gov"
            , "Pragma": "no-cache"
            , "Priority": "u=4"
            ,
            "Referer": "https://www.gas.uscourts.gov/search_vb/searchopinions2.aspx"
            , "Sec-Fetch-Dest": "iframe"
            , "Sec-Fetch-Mode": "navigate"
            , "Sec-Fetch-Site": "same-origin"
            , "Sec-Fetch-User": "?1"
            , "Upgrade-Insecure-Requests": "1"
            ,
            "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:136.0) Gecko/20100101 Firefox/136.0"
        }
        data1=f"__EVENTTARGET=SearchButton&__LASTFOCUS=&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwUJNDcwMzM1MTYyD2QWAgIDD2QWAgIBD2QWDAIFDxBkEBUGEVNlbGVjdCBBbGwgSnVkZ2VzDUp1ZGdlIEJhcnJldHQNSnVkZ2UgQ29sZW1hbgtKdWRnZSBEYWxpcwtKdWRnZSBEYXZpcwlKdWRnZSBLaW0VBjlDOlxpbmV0cHViXHd3d3Jvb3RcZHRTZWFyY2hcaW5kZXhlc1xBbGwgQmFua3J1cHRjeSBKdWRnZXMxQzpcaW5ldHB1Ylx3d3dyb290XGR0U2VhcmNoXGluZGV4ZXNcSnVkZ2UgQmFycmV0dDFDOlxpbmV0cHViXHd3d3Jvb3RcZHRTZWFyY2hcaW5kZXhlc1xKdWRnZSBDb2xlbWFuL0M6XGluZXRwdWJcd3d3cm9vdFxkdFNlYXJjaFxpbmRleGVzXEp1ZGdlIERhbGlzL0M6XGluZXRwdWJcd3d3cm9vdFxkdFNlYXJjaFxpbmRleGVzXEp1ZGdlIERhdmlzLUM6XGluZXRwdWJcd3d3cm9vdFxkdFNlYXJjaFxpbmRleGVzXEp1ZGdlIEtpbRQrAwZnZ2dnZ2dkZAIfDw8WAh4EVGV4dAUBMGRkAi0PDxYCHwAFAjExZGQCLw8PFgIfAGVkZAIxDw8WAh8AZWRkAjsPPCsACwIADxYQHghQYWdlU2l6ZQIKHghEYXRhS2V5cxYAHhBDdXJyZW50UGFnZUluZGV4Zh4QVmlydHVhbEl0ZW1Db3VudAILHgtfIUl0ZW1Db3VudAIKHhVfIURhdGFTb3VyY2VJdGVtQ291bnQCCx4JUGFnZUNvdW50AgIeB1Zpc2libGVnZAIWBB4IUG9zaXRpb24LKidTeXN0ZW0uV2ViLlVJLldlYkNvbnRyb2xzLlBhZ2VyUG9zaXRpb24CHgRfIVNCAoCAgAQWAmYPZBYUAgIPZBYGZg9kFgwCAw8PFgIeC05hdmlnYXRlVXJsBYMCaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL21qay8yMy0yMDE0MC1NSkstMzQtTWFpbiBEb2N1bWVudC5wZGYjeG1sPWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3Yvc2VhcmNoX3ZiL1BkZkhpZ2hsaWdodGVyLmFzcHg%2FRG9jSWQ9NjE3JkluZGV4PUMlM2ElNWNpbmV0cHViJTVjd3d3cm9vdCU1Y2R0U2VhcmNoJTVjaW5kZXhlcyU1Y0FsbCUyMEJhbmtydXB0Y3klMjBKdWRnZXMmSGl0Q291bnQ9MCZoaXRzPWQWAmYPFQEhMjMtMjAxNDAtTUpLLTM0LU1haW4gRG9jdW1lbnQucGRmZAIFDzwrABEDAA8WBB4LXyFEYXRhQm91bmRnHwUCAWQBEBYAFgAWAAwUKwAAFgJmD2QWAgIBD2QWCmYPDxYCHwAFCjEyLzI4LzIwMjNkZAIBDw8WAh8ABQIzNGRkAgIPDxYCHwAFDDIzLTIwMTQwLU1KS2RkAgMPDxYCHwAFFEp1ZGdlIE1pY2hlbGUgSi4gS2ltZGQCBA8PFgIfAAUGQnVmb3JkZGQCBw8PFgIfAAW6AVRoZSBDb3VydCBkZW5pZWQgYSBjcmVkaXRvcidzIE1vdGlvbiBmb3IgUmVsaWVmIGZyb20gQ28tRGVidG9yIFN0YXkgd2hlcmUgdGhlIGNyZWRpdG9yIGZhaWxlZCB0byBzaG93IHRoYXQgaXRzIGludGVyZXN0IHdvdWxkIGJlIGlycmVwYXJhYmx5IGhhcm1lZCBieSBjb250aW51YXRpb24gb2YgdGhlIGNvLWRlYnRvciBzdGF5LmRkAgoPFQEAZAILDw8WAh8LBVlodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvbWprLzIzLTIwMTQwLU1KSy0zNC1NYWluIERvY3VtZW50LnBkZmQWAmYPFQFZaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL21qay8yMy0yMDE0MC1NSkstMzQtTWFpbiBEb2N1bWVudC5wZGZkAgwPFQITMS8xLzIwMjQgOToyMTo0NiBBTQEwZAIBDw8WAh8ABSEyMy0yMDE0MC1NSkstMzQtTWFpbiBEb2N1bWVudC5wZGZkZAICDw8WAh8ABRMxLzEvMjAyNCA5OjIxOjQ2IEFNZGQCAw9kFgZmD2QWDAIDDw8WAh8LBYMCaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL21qay8yMy0wMjAwOC1NSkstMTctTWFpbiBEb2N1bWVudC5wZGYjeG1sPWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3Yvc2VhcmNoX3ZiL1BkZkhpZ2hsaWdodGVyLmFzcHg%2FRG9jSWQ9NjE2JkluZGV4PUMlM2ElNWNpbmV0cHViJTVjd3d3cm9vdCU1Y2R0U2VhcmNoJTVjaW5kZXhlcyU1Y0FsbCUyMEJhbmtydXB0Y3klMjBKdWRnZXMmSGl0Q291bnQ9MCZoaXRzPWQWAmYPFQEhMjMtMDIwMDgtTUpLLTE3LU1haW4gRG9jdW1lbnQucGRmZAIFDzwrABEDAA8WBB8MZx8FAgFkARAWAQIEFgE8KwAFAQAWAh4KSGVhZGVyVGV4dAUIUGxhbnRpZmYWAWYMFCsAABYCZg9kFgICAQ9kFgpmDw8WAh8ABQk4LzMxLzIwMjNkZAIBDw8WAh8ABQIxN2RkAgIPDxYCHwAFDDIzLTAyMDA4LU1KS2RkAgMPDxYCHwAFFEp1ZGdlIE1pY2hlbGUgSi4gS2ltZGQCBA8PFgIfAAUIV2lsbGlhbXNkZAIHDw8WAh8ABeAGVGhlIENvdXJ0IG9yZGVyZWQgYSBwcmVsaW1pbmFyeSBpbmp1bmN0aW9uIHJlcXVpcmluZyBjcmVkaXRvciBTdWxsaXZhbiBNb3RvcnMgdG8gdHVybiBvdmVyIERlYnRvcidzIHZlaGljbGUsIHdoaWNoIFN1bGxpdmFuIE1vdG9ycyBvciBpdHMgYWdlbnQgcmVwb3NzZXNzZWQgcHJpb3IgdG8gRGVidG9yJ3MgcGV0aXRpb24gZGF0ZSBhbmQgc3RpbGwgcG9zc2Vzc2VkIG9yIGNvbnRyb2xsZWQuIERlYnRvciBzaG93ZWQgKDEpIGEgc3Vic3RhbnRpYWwgbGlrZWxpaG9vZCBvZiBzdWNjZXNzIG9uIHRoZSBtZXJpdHM7ICgyKSB0aGF0IGlycmVwYXJhYmxlIGluanVyeSB3aWxsIGJlIHN1ZmZlcmVkIHVubGVzcyB0aGUgaW5qdW5jdGlvbiBpc3N1ZXM7ICgzKSB0aGUgdGhyZWF0ZW5lZCBpbmp1cnkgdG8gdGhlIG1vdmFudCBvdXR3ZWlnaHMgd2hhdGV2ZXIgZGFtYWdlIHRoZSBwcm9wb3NlZCBpbmp1bmN0aW9uIG1heSBjYXVzZSB0aGUgb3Bwb3NpbmcgcGFydHk7IGFuZCAoNCkgaWYgaXNzdWVkLCB0aGUgaW5qdW5jdGlvbiB3b3VsZCBub3QgYmUgYWR2ZXJzZSB0byB0aGUgcHVibGljIGludGVyZXN0LiBGdXJ0aGVyLCBTdWxsaXZhbiBNb3RvcnMgaGFkIG5vdCB5ZXQgZGlzcG9zZWQgb2YgdGhlIHZlaGljbGUsIHNvIERlYnRvciBzdGlsbCBoYWQgYW4gaW50ZXJlc3QgaW4gdGhlIHByb3BlcnR5IGFuZCBzdWNoIGludGVyZXN0IGJlY2FtZSBwcm9wZXJ0eSBvZiB0aGUgYmFua3J1cHRjeSBlc3RhdGUgdXBvbiB0aGUgcGV0aXRpb24gZGF0ZS4gQWNjb3JkaW5nbHksIHRoZSBDb3VydCBvcmRlcmVkIFN1bGxpdmFuIE1vdG9ycyB0byB0dXJuIG92ZXIgdGhlIHZlaGljbGUgdG8gRGVidG9yIHVuZGVyIDExIFUuUy5DLiDCpyA1NDIuZGQCCg8VAQBkAgsPDxYCHwsFWWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9tamsvMjMtMDIwMDgtTUpLLTE3LU1haW4gRG9jdW1lbnQucGRmZBYCZg8VAVlodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvbWprLzIzLTAyMDA4LU1KSy0xNy1NYWluIERvY3VtZW50LnBkZmQCDA8VAhMxLzEvMjAyNCA5OjIxOjQ2IEFNATBkAgEPDxYCHwAFITIzLTAyMDA4LU1KSy0xNy1NYWluIERvY3VtZW50LnBkZmRkAgIPDxYCHwAFEzEvMS8yMDI0IDk6MjE6NDYgQU1kZAIED2QWBmYPZBYMAgMPDxYCHwsFgwJodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvbWprLzIzLTAyMDA1LU1KSy02Mi1NYWluIERvY3VtZW50LnBkZiN4bWw9aHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi9zZWFyY2hfdmIvUGRmSGlnaGxpZ2h0ZXIuYXNweD9Eb2NJZD02MTUmSW5kZXg9QyUzYSU1Y2luZXRwdWIlNWN3d3dyb290JTVjZHRTZWFyY2glNWNpbmRleGVzJTVjQWxsJTIwQmFua3J1cHRjeSUyMEp1ZGdlcyZIaXRDb3VudD0wJmhpdHM9ZBYCZg8VASEyMy0wMjAwNS1NSkstNjItTWFpbiBEb2N1bWVudC5wZGZkAgUPPCsAEQMADxYEHwxnHwUCAWQBEBYBAgQWATwrAAUBABYCHw0FCFBsYW50aWZmFgFmDBQrAAAWAmYPZBYCAgEPZBYKZg8PFgIfAAUJMi8yMC8yMDI0ZGQCAQ8PFgIfAAUCNjJkZAICDw8WAh8ABQwyMy0wMjAwNS1NSktkZAIDDw8WAh8ABRRKdWRnZSBNaWNoZWxlIEouIEtpbWRkAgQPDxYCHwAFBERpbGxkZAIHDw8WAh8ABZQGVGhlIENvdXJ0IGRlbmllZCB0aGUgTW90aW9uIHRvIEVuZm9yY2UgU2V0dGxlbWVudCBmaWxlZCBieSBQbGFpbnRpZmYgYW5kIENyb3NzLU1vdGlvbiB0byBFbmZvcmNlIFNldHRsZW1lbnQgZmlsZWQgYnkgRGVmZW5kYW50LiBUaGUgcGFydGllcywgdGhyb3VnaCB0aGVpciBhdHRvcm5leXMsIGhhZCByZWFjaGVkIGEgc2V0dGxlbWVudCBhcyB0byBhIGxhcmdlIHBvcnRpb24gb2YgUGxhaW50aWZmJ3MgdW5zZWN1cmVkIGNsYWltIGFnYWluc3QgRGVmZW5kYW50LCBidXQgdGhlIHNldHRsZW1lbnQgd2FzIHNpbGVudCBhcyB0byB0aGUgdHJlYXRtZW50IG9mIHRoZSByZW1haW5kZXIgb2YgUGxhaW50aWZmJ3MgY2xhaW0uIFBsYWludGlmZiB1cmdlZCB0aGF0IGl0IHdvdWxkIGJlIHRyZWF0ZWQgYXMgdW5zZWN1cmVkOyBEZWZlbmRhbnQgY29udGVuZGVkIGl0IHdvdWxkIGJlIHJlbGVhc2VkLiBUaGUgQ291cnQgY29uY2x1ZGVkIHRoYXQgdGhlIHRyZWF0bWVudCBvZiB0aGUgcmVtYWluZGVyIG9mIHRoZSB1bnNlY3VyZWQgY2xhaW0gd2FzIGFuIGVzc2VudGlhbCB0ZXJtIG9mIHRoZSBzZXR0bGVtZW50LCBhbmQgdGhlIHBhcnRpZXMgZGlkIG5vdCByZWFjaCBhbiBhZ3JlZW1lbnQgb24gdGhpcyB0ZXJtLiBBY2NvcmRpbmdseSwgYmVjYXVzZSB0aGUgcGFydGllcyBkaWQgbm90IGFncmVlIG9uIGFsbCBlc3NlbnRpYWwgdGVybXMgb2YgdGhlIHB1cnBvcnRlZCBzZXR0bGVtZW50LCBubyBzZXR0bGVtZW50IHdhcyByZWFjaGVkIGFuZCB0aGUgcGFydGllcycgbW90aW9ucyB3ZXJlIGRlbmllZC5kZAIKDxUBAGQCCw8PFgIfCwVZaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL21qay8yMy0wMjAwNS1NSkstNjItTWFpbiBEb2N1bWVudC5wZGZkFgJmDxUBWWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9tamsvMjMtMDIwMDUtTUpLLTYyLU1haW4gRG9jdW1lbnQucGRmZAIMDxUCFDIvMjIvMjAyNCA5OjAxOjAxIEFNATBkAgEPDxYCHwAFITIzLTAyMDA1LU1KSy02Mi1NYWluIERvY3VtZW50LnBkZmRkAgIPDxYCHwAFFDIvMjIvMjAyNCA5OjAxOjAxIEFNZGQCBQ9kFgZmD2QWDAIDDw8WAh8LBYMCaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL21qay8yMi01MDMwMi1NSkstNTQtTWFpbiBEb2N1bWVudC5wZGYjeG1sPWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3Yvc2VhcmNoX3ZiL1BkZkhpZ2hsaWdodGVyLmFzcHg%%2FRG9jSWQ9NjAwJkluZGV4PUMlM2ElNWNpbmV0cHViJTVjd3d3cm9vdCU1Y2R0U2VhcmNoJTVjaW5kZXhlcyU1Y0FsbCUyMEJhbmtydXB0Y3klMjBKdWRnZXMmSGl0Q291bnQ9MCZoaXRzPWQWAmYPFQEiMTgtNTA1ODQtTUpLLTEyMy1NYWluIERvY3VtZW50LnBkZmQCBQ88KwARAwAPFgQfDGcfBQIBZAEQFgAWABYADBQrAAAWAmYPZBYCAgEPZBYKZg8PFgIfAAUJNy8xMS8yMDI0ZGQCAQ8PFgIfAAUDMTIzZGQCAg8PFgIfAAUMMTgtNTA1ODQtTUpLZGQCAw8PFgIfAAUaQ2hpZWYgSnVkZ2UgTWljaGVsZSBKLiBLaW1kZAIEDw8WAh8ABQVFdmFuc2RkAgcPDxYCHwAFgAdUaGUgQ291cnQgZ3JhbnRlZCBhIGNyZWRpdG9yJ3MgbW90aW9uIGZvciByZWxpZWYgZnJvbSBzdGF5LiBUaGUgY3JlZGl0b3IgaGVsZCBhIGNsYWltIHNlY3VyZWQgYnkgYSB2ZWhpY2xlIG93bmVkIHNvbGVseSBieSB0aGUgZGVjZWFzZWQgZGVidG9yLWh1c2JhbmQtLXdobyB3YXMgZGlzbWlzc2VkIGZyb20gdGhlIGNhc2UgYWZ0ZXIgaGlzIGRlYXRoLS1hbmQgc291Z2h0IHRvIHJlcG9zc2VzcyB0aGUgdmVoaWNsZSBmcm9tIHRoZSBzdXJ2aXZpbmcgZGVidG9yLXdpZmUuIFRoZSBDb3VydCBmb3VuZCB0aGF0IGFmdGVyIHRoZSBkZWJ0b3ItaHVzYmFuZCB3YXMgZGlzbWlzc2VkIGZyb20gdGhlIGNhc2UsIHRoZSB0ZXJtcyBvZiB0aGUgcGxhbiB0aGF0IGNvbmNlcm5lZCBvbmx5IHRoZSBkZWJ0b3ItaHVzYmFuZCBhbmQgaGlzIGxpYWJpbGl0aWVzLCBzdWNoIGFzIHRoZSBjcmVkaXRvcidzIHRyZWF0bWVudCB1bmRlciB0aGUgcGxhbiwgd2VyZSBubyBsb25nZXIgYmluZGluZyBiZWNhdXNlIG9uY2UgdGhlIGRlYnRvci1odXNiYW5kIHdhcyBkaXNtaXNzZWQsIHRoZSBwcmUtYmFua3J1cHRjeSBzdGF0dXMgcXVvIHdhcyByZXN0b3JlZCBhcyB0byBoaXMgc2VwYXJhdGUgYXNzZXRzIGFuZCBsaWFiaWxpdGllcy4gVGhlIGRlYnRvci13aWZlIGhhZCBvbmx5IGEgcG9zc2Vzc29yeSBpbnRlcmVzdCBpbiB0aGUgdmVoaWNsZSBhbmQgd2FzIG5vdCBwYXlpbmcgdGhlIGNyZWRpdG9yJ3MgY2xhaW0gaW4gZnVsbC4gVGhlIENvdXJ0IGNvbmNsdWRlZCB0aGF0IHRoZSBjcmVkaXRvciBoYWQgZXN0YWJsaXNoZWQgYSBwcmltYSBmYWNpZSBzaG93aW5nIG9mIGNhdXNlIGZvciBzdGF5IHJlbGllZiwgYW5kIHRoZSBkZWJ0b3Itd2lmZSBoYWQgbm90IG92ZXJjb21lIHN1Y2ggYSBzaG93aW5nLmRkAgoPFQEAZAILDw8WAh8LBVpodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvbWprLzE4LTUwNTg0LU1KSy0xMjMtTWFpbiBEb2N1bWVudC5wZGZkFgJmDxUBWmh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9tamsvMTgtNTA1ODQtTUpLLTEyMy1NYWluIERvY3VtZW50LnBkZmQCDA8VAhQzLzI0LzIwMjUgOTowMDoyNiBBTQEwZAIBDw8WAh8ABSIxOC01MDU4NC1NSkstMTIzLU1haW4gRG9jdW1lbnQucGRmZGQCAg8PFgIfAAUUMy8yNC8yMDI1IDk6MDA6MjYgQU1kZAIJD2QWBmYPZBYMAgMPDxYCHwsFggJodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvZWpjLzIzLTYwMzE3LUVKQy00My1NYWluIERvY3VtZW50LnBkZiN4bWw9aHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi9zZWFyY2hfdmIvUGRmSGlnaGxpZ2h0ZXIuYXNweD9Eb2NJZD04OCZJbmRleD1DJTNhJTVjaW5ldHB1YiU1Y3d3d3Jvb3QlNWNkdFNlYXJjaCU1Y2luZGV4ZXMlNWNBbGwlMjBCYW5rcnVwdGN5JTIwSnVkZ2VzJkhpdENvdW50PTAmaGl0cz1kFgJmDxUBITIzLTYwMzE3LUVKQy00My1NYWluIERvY3VtZW50LnBkZmQCBQ88KwARAwAPFgQfDGcfBQIBZAEQFgAWABYADBQrAAAWAmYPZBYCAgEPZBYKZg8PFgIfAAUKMTEvMTgvMjAyNGRkAgEPDxYCHwAFAjQzZGQCAg8PFgIfAAUMMjMtNjAzMTctRUpDZGQCAw8PFgIfAAUcSnVkZ2UgRWR3YXJkIEouIENvbGVtYW4sIElJSWRkAgQPDxYCHwAFBkFudG1hbmRkAgcPDxYCHwBlZGQCCg8VAQBkAgsPDxYCHwsFWWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9lamMvMjMtNjAzMTctRUpDLTQzLU1haW4gRG9jdW1lbnQucGRmZBYCZg8VAVlodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvZWpjLzIzLTYwMzE3LUVKQy00My1NYWluIERvY3VtZW50LnBkZmQCDA8VAhUxMS8yMC8yMDI0IDk6MDA6MDQgQU0BMGQCAQ8PFgIfAAUhMjMtNjAzMTctRUpDLTQzLU1haW4gRG9jdW1lbnQucGRmZGQCAg8PFgIfAAUVMTEvMjAvMjAyNCA5OjAwOjA0IEFNZGQCCg9kFgZmD2QWDAIDDw8WAh8LBYICaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL2VqYy8yMy02MDMxNy1FSkMtNDEtTWFpbiBEb2N1bWVudC5wZGYjeG1sPWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3Yvc2VhcmNoX3ZiL1BkZkhpZ2hsaWdodGVyLmFzcHg%2FRG9jSWQ9ODcmSW5kZXg9QyUzYSU1Y2luZXRwdWIlNWN3d3dyb290JTVjZHRTZWFyY2glNWNpbmRleGVzJTVjQWxsJTIwQmFua3J1cHRjeSUyMEp1ZGdlcyZIaXRDb3VudD0wJmhpdHM9ZBYCZg8VASEyMy02MDMxNy1FSkMtNDEtTWFpbiBEb2N1bWVudC5wZGZkAgUPPCsAEQMADxYEHwxnHwUCAWQBEBYAFgAWAAwUKwAAFgJmD2QWAgIBD2QWCmYPDxYCHwAFCjExLzE0LzIwMjRkZAIBDw8WAh8ABQI0MWRkAgIPDxYCHwAFDDIzLTYwMzE3LUVKQ2RkAgMPDxYCHwAFHEp1ZGdlIEVkd2FyZCBKLiBDb2xlbWFuLCBJSUlkZAIEDw8WAh8ABQZBbnRtYW5kZAIHDw8WAh8ABeoKVGhlIERlYnRvciBpbiB0aGlzIENoYXB0ZXIgMTMgY2FzZSBjbGFpbWVkIGEgJDQzLDAwMC4wMCBob21lc3RlYWQgZXhlbXB0aW9uIGluIGhlciBwZXJzb25hbCByZXNpZGVuY2UuIFVuZGVyIEdlb3JnaWHigJlzIGV4ZW1wdGlvbiBzdGF0dXRlLCBhIGRlYnRvciBtYXkgZXhlbXB0IGhlciDigJxhZ2dyZWdhdGUgaW50ZXJlc3QsIG5vdCB0byBleGNlZWQgJDIxLDUwMC4wMCBpbiB2YWx1ZSwgaW4gcmVhbCBwcm9wZXJ0eSBvciBwZXJzb25hbCBwcm9wZXJ0eSB0aGF0IHRoZSBkZWJ0b3IgLiAuIC4gdXNlcyBhcyBhIHJlc2lkZW5jZS7igJ0gT3IsIOKAnFtpXW4gdGhlIGV2ZW50IHRpdGxlIHRvIHByb3BlcnR5IHVzZWQgZm9yIHRoZSBbaG9tZXN0ZWFkXSBleGVtcHRpb24gLiAuIC4gaXMgaW4gb25lIG9mIHR3byBzcG91c2VzIHdobyBpcyBhIGRlYnRvciwgdGhlIGFtb3VudCBvZiB0aGUgZXhlbXB0aW9uIC4gLiAuIHNoYWxsIGJlICQ0MywwMDAuMDAu4oCdIEhlcmUsIHRoZSBEZWJ0b3LigJlzIGZhdGhlciBpbiBoaXMgd2lsbCBsZWZ0IHRoZSBob21lIHRvIGhlciBhbmQgdG8gaGVyIHRocmVlIHNpYmxpbmdzLiBIZSBkaWVkIGluIDE5OTYsIGFuZCBubyBmdXJ0aGVyIGFjdGlvbiBoYXMgYmVlbiB0YWtlbiBpbiBoaXMgcHJvYmF0ZSBjYXNlIGluIDI4IHllYXJzLiBUaGUgRGVidG9yIGFuZCBoZXIgaHVzYmFuZCBoYXZlIGxpdmVkIGluIHRoZSBob21lIHNpbmNlIDE5OTkuIFRoZSBDaGFwdGVyIDEzIFRydXN0ZWUgb2JqZWN0ZWQgdG8gdGhlIERlYnRvcuKAmXMgY2xhaW1lZCAkNDMsMDAwLjAwIGRvdWJsZSBob21lc3RlYWQgZXhlbXB0aW9uIGZvciB0d28gcmVhc29ucy4gRmlyc3QsIHRoZSBUcnVzdGVlIGFyZ3VlZCB0aGF0IHRoZSBEZWJ0b3LigJlzIHBhcnRpYWwgaW50ZXJlc3QgaW4gdGhlIHJlYWwgcHJvcGVydHkgZGlkIG5vdCBzdWZmaWNlIHRvIHN1cHBvcnQgdGhlIGRvdWJsZSBleGVtcHRpb24uIFNlY29uZCwgdGhlIFRydXN0ZWUgYXJndWVkIHRoYXQgdGhlIHB1cnBvc2Ugb2YgdGhlIGRvdWJsZSBleGVtcHRpb24gaXMgdG8gcHJvdGVjdCBhIG5vbi1maWxpbmcgc3BvdXNl4oCZcyBlcXVpdGFibGUgaW50ZXJlc3QgYW5kIHRoYXQgaGVyZSB0aGUgRGVidG9y4oCZcyBodXNiYW5kIGhhZCBubyBpbnRlcmVzdCB0byBwcm90ZWN0LiBUaGUgQ291cnQgcmVqZWN0ZWQgdGhlIFRydXN0ZWXigJlzIGFyZ3VtZW50cywgZmluZGluZyB0aGF0IHRoZSBHZW9yZ2lhIGRvdWJsZSBob21lc3RlYWQgZXhlbXB0aW9uIGRvZXMgbm90IHJlcXVpcmUgdGhhdCB0aGUgRGVidG9yIGhhdmUgc29sZSBvd25lcnNoaXAgb2YgdGhlIHJlc2lkZW5jZSBvciB0aGF0IHRoZSBub24tZmlsaW5nIHNwb3VzZSBoYXZlIGFuIGVxdWl0YWJsZSBpbnRlcmVzdC4gZGQCCg8VAQBkAgsPDxYCHwsFWWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9lamMvMjMtNjAzMTctRUpDLTQxLU1haW4gRG9jdW1lbnQucGRmZBYCZg8VAVlodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvZWpjLzIzLTYwMzE3LUVKQy00MS1NYWluIERvY3VtZW50LnBkZmQCDA8VAhUxMS8xNS8yMDI0IDk6MDA6MDYgQU0BMGQCAQ8PFgIfAAUhMjMtNjAzMTctRUpDLTQxLU1haW4gRG9jdW1lbnQucGRmZGQCAg8PFgIfAAUVMTEvMTUvMjAyNCA5OjAwOjA2IEFNZGQCCw9kFgZmD2QWDAIDDw8WAh8LBYICaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL2VqYy8yMS00MDc0OS1FSkMtNjAtTWFpbiBEb2N1bWVudC5wZGYjeG1sPWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3Yvc2VhcmNoX3ZiL1BkZkhpZ2hsaWdodGVyLmFzcHg%2FRG9jSWQ9ODImSW5kZXg9QyUzYSU1Y2luZXRwdWIlNWN3d3dyb290JTVjZHRTZWFyY2glNWNpbmRleGVzJTVjQWxsJTIwQmFua3J1cHRjeSUyMEp1ZGdlcyZIaXRDb3VudD0wJmhpdHM9ZBYCZg8VASEyMS00MDc0OS1FSkMtNjAtTWFpbiBEb2N1bWVudC5wZGZkAgUPPCsAEQMADxYEHwxnHwUCAWQBEBYAFgAWAAwUKwAAFgJmD2QWAgIBD2QWCmYPDxYCHwAFCTMvMjcvMjAyNGRkAgEPDxYCHwAFAjYwZGQCAg8PFgIfAAUMMjEtNDA3NDktRUpDZGQCAw8PFgIfAAUiQ2hpZWYgSnVkZ2UgRWR3YXJkIEouIENvbGVtYW4sIElJSWRkAgQPDxYCHwAFBkdpYnNvbmRkAgcPDxYCHwBlZGQCCg8VAQBkAgsPDxYCHwsFWWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9lamMvMjEtNDA3NDktRUpDLTYwLU1haW4gRG9jdW1lbnQucGRmZBYCZg8VAVlodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvZWpjLzIxLTQwNzQ5LUVKQy02MC1NYWluIERvY3VtZW50LnBkZmQCDA8VAhQzLzI5LzIwMjQgOTowMDoxOCBBTQEwZAIBDw8WAh8ABSEyMS00MDc0OS1FSkMtNjAtTWFpbiBEb2N1bWVudC5wZGZkZAICDw8WAh8ABRQzLzI5LzIwMjQgOTowMDoxOCBBTWRkGAsFHl9fQ29udHJvbHNSZXF1aXJlUG9zdEJhY2tLZXlfXxYCBQZQaG9uaWMFCFN0ZW1taW5nBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwNCRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwxMSRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwNyRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwOCRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwNSRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwOSRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwNiRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwMyRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwxMCRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwxMiRHcmlkVmlldzEPPCsADAEIAgFkpmoH%2BGmS8RZWx6BYCoQTn0Te2ZS7nNIfgHoZk2LWRRU%3D&__VIEWSTATEGENERATOR=46A7D97C&__EVENTVALIDATION=%2FwEdACNeYY%2Bvi9hQ%2FPOsqBJrbm8WP1jLJHiqNfRsonZfptdXU3cMhiz54OirO2tTY2YNoZsvgbKyrOqsb9cXYU%2FyyNBmaBNaGqNy%2BF2BYdzT80QWmiki0j4%2BxuE8PBwQGQHP%2FaTFY9sSH%2BFYeuoBJjxjwT%2BxTegt%2BB51QD64n%2F%2BISTSBG834O%2FGfAV4V4n0wgFZHr3emi7Us9KEZhJ7P8audriSvJUxeBtj%2BkIEcsJMVND0%2FNcBAqaWIlOnFrA%2Be%2BF9iMajUT%2FIr4XOLUa%2FGzxCDHG8hq9enNsHnXZXGlTzI1pxkfgn6eBSbEmLRrvXh%2B56oeahQ658zPOWpoqtBxsGucJ2%2F9Eb8DUzVA%2Bn9FYiNg05KmX3cX%2BTv3rKtLZ%2BPyXxTmETR3uz8du8PkM0LixpIqO2Rm1l8qR09HuTaMQSg1sRaPGiXlaK0GkwyoVerWaYhGrlSH9GNEHpSQt4uBXVFIaZwkZy00Syppt1QBVkhPUaJlEjwEHTxJktNl3IwI8TrpUEHjs7PVNzYCwoyiNEWodSunyt9Q5baIeJRCKDyxu4PL4SqowTr5PuLXHxMDS9zIbXDTb7o3suZSoAjalnk%2BF68uOE4pYODWL3GmpWxFARGgzXywvZXAc2I7Sin2Rsgy333yUhV4e%2FlT8cdoUpbV%2F0NEvHulcIzxkQteAKNhNvalnwPJ5KjVjHUjR8TX90%2FhiQGiz7UDShwbajkefCTg04ls7cTJtNcv31mOHq24QFRbZum%2FfDGmkBw0k9r21y5Tump0cJ5nlreDrp%2BgHmh5OjL&JudgeID=C%3A%5Cinetpub%5Cwwwroot%5CdtSearch%5Cindexes%5CAll+Bankruptcy+Judges&SearchRequest=&SearchType=allwords&txtBegDate={start}&txtEndDate={end}&Fuzziness=0&SearchButton=Search&ddSearchBy=Hits"

        html_page = requests.post(url=self.url,headers=headers,data=data1)
        self.html=html.fromstring(html_page.text)
        self._process_html()
        total_page = self.html.xpath(".//table[@class='SearchTable']//tr[8]/td[2]/span/text()")
        pages_left = int(total_page[0])-10

        pages = pages_left//10
        if pages_left%10 >0:
            pages+=1

        while pages>0:
            data2 = "__EVENTTARGET=SearchResultsGrid%24ctl01%24ctl01&__LASTFOCUS=&__EVENTARGUMENT=&__VIEWSTATE=%2FwEPDwUJNDcwMzM1MTYyD2QWAgIDD2QWAgIBD2QWDAIFDxBkEBUGEVNlbGVjdCBBbGwgSnVkZ2VzDUp1ZGdlIEJhcnJldHQNSnVkZ2UgQ29sZW1hbgtKdWRnZSBEYWxpcwtKdWRnZSBEYXZpcwlKdWRnZSBLaW0VBjlDOlxpbmV0cHViXHd3d3Jvb3RcZHRTZWFyY2hcaW5kZXhlc1xBbGwgQmFua3J1cHRjeSBKdWRnZXMxQzpcaW5ldHB1Ylx3d3dyb290XGR0U2VhcmNoXGluZGV4ZXNcSnVkZ2UgQmFycmV0dDFDOlxpbmV0cHViXHd3d3Jvb3RcZHRTZWFyY2hcaW5kZXhlc1xKdWRnZSBDb2xlbWFuL0M6XGluZXRwdWJcd3d3cm9vdFxkdFNlYXJjaFxpbmRleGVzXEp1ZGdlIERhbGlzL0M6XGluZXRwdWJcd3d3cm9vdFxkdFNlYXJjaFxpbmRleGVzXEp1ZGdlIERhdmlzLUM6XGluZXRwdWJcd3d3cm9vdFxkdFNlYXJjaFxpbmRleGVzXEp1ZGdlIEtpbRQrAwZnZ2dnZ2dkZAIfDw8WAh4EVGV4dAUBMGRkAi0PDxYCHwAFAjExZGQCLw8PFgIfAGVkZAIxDw8WAh8AZWRkAjsPPCsACwIADxYQHghQYWdlU2l6ZQIKHghEYXRhS2V5cxYAHhBDdXJyZW50UGFnZUluZGV4Zh4QVmlydHVhbEl0ZW1Db3VudAILHgtfIUl0ZW1Db3VudAIKHhVfIURhdGFTb3VyY2VJdGVtQ291bnQCCx4JUGFnZUNvdW50AgIeB1Zpc2libGVnZAIWBB4IUG9zaXRpb24LKidTeXN0ZW0uV2ViLlVJLldlYkNvbnRyb2xzLlBhZ2VyUG9zaXRpb24CHgRfIVNCAoCAgAQWAmYPZBYUAgIPZBYGZg9kFgwCAw8PFgIeC05hdmlnYXRlVXJsBYMCaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL21qay8yMy0yMDE0MC1NSkstMzQtTWFpbiBEb2N1bWVudC5wZGYjeG1sPWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3Yvc2VhcmNoX3ZiL1BkZkhpZ2hsaWdodGVyLmFzcHg%2FRG9jSWQ9NjE3JkluZGV4PUMlM2ElNWNpbmV0cHViJTVjd3d3cm9vdCU1Y2R0U2VhcmNoJTVjaW5kZXhlcyU1Y0FsbCUyMEJhbmtydXB0Y3klMjBKdWRnZXMmSGl0Q291bnQ9MCZoaXRzPWQWAmYPFQEhMjMtMjAxNDAtTUpLLTM0LU1haW4gRG9jdW1lbnQucGRmZAIFDzwrABEDAA8WBB4LXyFEYXRhQm91bmRnHwUCAWQBEBYAFgAWAAwUKwAAFgJmD2QWAgIBD2QWCmYPDxYCHwAFCjEyLzI4LzIwMjNkZAIBDw8WAh8ABQIzNGRkAgIPDxYCHwAFDDIzLTIwMTQwLU1KS2RkAgMPDxYCHwAFFEp1ZGdlIE1pY2hlbGUgSi4gS2ltZGQCBA8PFgIfAAUGQnVmb3JkZGQCBw8PFgIfAAW6AVRoZSBDb3VydCBkZW5pZWQgYSBjcmVkaXRvcidzIE1vdGlvbiBmb3IgUmVsaWVmIGZyb20gQ28tRGVidG9yIFN0YXkgd2hlcmUgdGhlIGNyZWRpdG9yIGZhaWxlZCB0byBzaG93IHRoYXQgaXRzIGludGVyZXN0IHdvdWxkIGJlIGlycmVwYXJhYmx5IGhhcm1lZCBieSBjb250aW51YXRpb24gb2YgdGhlIGNvLWRlYnRvciBzdGF5LmRkAgoPFQEAZAILDw8WAh8LBVlodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvbWprLzIzLTIwMTQwLU1KSy0zNC1NYWluIERvY3VtZW50LnBkZmQWAmYPFQFZaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL21qay8yMy0yMDE0MC1NSkstMzQtTWFpbiBEb2N1bWVudC5wZGZkAgwPFQITMS8xLzIwMjQgOToyMTo0NiBBTQEwZAIBDw8WAh8ABSEyMy0yMDE0MC1NSkstMzQtTWFpbiBEb2N1bWVudC5wZGZkZAICDw8WAh8ABRMxLzEvMjAyNCA5OjIxOjQ2IEFNZGQCAw9kFgZmD2QWDAIDDw8WAh8LBYMCaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL21qay8yMy0wMjAwOC1NSkstMTctTWFpbiBEb2N1bWVudC5wZGYjeG1sPWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3Yvc2VhcmNoX3ZiL1BkZkhpZ2hsaWdodGVyLmFzcHg%2FRG9jSWQ9NjE2JkluZGV4PUMlM2ElNWNpbmV0cHViJTVjd3d3cm9vdCU1Y2R0U2VhcmNoJTVjaW5kZXhlcyU1Y0FsbCUyMEJhbmtydXB0Y3klMjBKdWRnZXMmSGl0Q291bnQ9MCZoaXRzPWQWAmYPFQEhMjMtMDIwMDgtTUpLLTE3LU1haW4gRG9jdW1lbnQucGRmZAIFDzwrABEDAA8WBB8MZx8FAgFkARAWAQIEFgE8KwAFAQAWAh4KSGVhZGVyVGV4dAUIUGxhbnRpZmYWAWYMFCsAABYCZg9kFgICAQ9kFgpmDw8WAh8ABQk4LzMxLzIwMjNkZAIBDw8WAh8ABQIxN2RkAgIPDxYCHwAFDDIzLTAyMDA4LU1KS2RkAgMPDxYCHwAFFEp1ZGdlIE1pY2hlbGUgSi4gS2ltZGQCBA8PFgIfAAUIV2lsbGlhbXNkZAIHDw8WAh8ABeAGVGhlIENvdXJ0IG9yZGVyZWQgYSBwcmVsaW1pbmFyeSBpbmp1bmN0aW9uIHJlcXVpcmluZyBjcmVkaXRvciBTdWxsaXZhbiBNb3RvcnMgdG8gdHVybiBvdmVyIERlYnRvcidzIHZlaGljbGUsIHdoaWNoIFN1bGxpdmFuIE1vdG9ycyBvciBpdHMgYWdlbnQgcmVwb3NzZXNzZWQgcHJpb3IgdG8gRGVidG9yJ3MgcGV0aXRpb24gZGF0ZSBhbmQgc3RpbGwgcG9zc2Vzc2VkIG9yIGNvbnRyb2xsZWQuIERlYnRvciBzaG93ZWQgKDEpIGEgc3Vic3RhbnRpYWwgbGlrZWxpaG9vZCBvZiBzdWNjZXNzIG9uIHRoZSBtZXJpdHM7ICgyKSB0aGF0IGlycmVwYXJhYmxlIGluanVyeSB3aWxsIGJlIHN1ZmZlcmVkIHVubGVzcyB0aGUgaW5qdW5jdGlvbiBpc3N1ZXM7ICgzKSB0aGUgdGhyZWF0ZW5lZCBpbmp1cnkgdG8gdGhlIG1vdmFudCBvdXR3ZWlnaHMgd2hhdGV2ZXIgZGFtYWdlIHRoZSBwcm9wb3NlZCBpbmp1bmN0aW9uIG1heSBjYXVzZSB0aGUgb3Bwb3NpbmcgcGFydHk7IGFuZCAoNCkgaWYgaXNzdWVkLCB0aGUgaW5qdW5jdGlvbiB3b3VsZCBub3QgYmUgYWR2ZXJzZSB0byB0aGUgcHVibGljIGludGVyZXN0LiBGdXJ0aGVyLCBTdWxsaXZhbiBNb3RvcnMgaGFkIG5vdCB5ZXQgZGlzcG9zZWQgb2YgdGhlIHZlaGljbGUsIHNvIERlYnRvciBzdGlsbCBoYWQgYW4gaW50ZXJlc3QgaW4gdGhlIHByb3BlcnR5IGFuZCBzdWNoIGludGVyZXN0IGJlY2FtZSBwcm9wZXJ0eSBvZiB0aGUgYmFua3J1cHRjeSBlc3RhdGUgdXBvbiB0aGUgcGV0aXRpb24gZGF0ZS4gQWNjb3JkaW5nbHksIHRoZSBDb3VydCBvcmRlcmVkIFN1bGxpdmFuIE1vdG9ycyB0byB0dXJuIG92ZXIgdGhlIHZlaGljbGUgdG8gRGVidG9yIHVuZGVyIDExIFUuUy5DLiDCpyA1NDIuZGQCCg8VAQBkAgsPDxYCHwsFWWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9tamsvMjMtMDIwMDgtTUpLLTE3LU1haW4gRG9jdW1lbnQucGRmZBYCZg8VAVlodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvbWprLzIzLTAyMDA4LU1KSy0xNy1NYWluIERvY3VtZW50LnBkZmQCDA8VAhMxLzEvMjAyNCA5OjIxOjQ2IEFNATBkAgEPDxYCHwAFITIzLTAyMDA4LU1KSy0xNy1NYWluIERvY3VtZW50LnBkZmRkAgIPDxYCHwAFEzEvMS8yMDI0IDk6MjE6NDYgQU1kZAIED2QWBmYPZBYMAgMPDxYCHwsFgwJodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvbWprLzIzLTAyMDA1LU1KSy02Mi1NYWluIERvY3VtZW50LnBkZiN4bWw9aHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi9zZWFyY2hfdmIvUGRmSGlnaGxpZ2h0ZXIuYXNweD9Eb2NJZD02MTUmSW5kZXg9QyUzYSU1Y2luZXRwdWIlNWN3d3dyb290JTVjZHRTZWFyY2glNWNpbmRleGVzJTVjQWxsJTIwQmFua3J1cHRjeSUyMEp1ZGdlcyZIaXRDb3VudD0wJmhpdHM9ZBYCZg8VASEyMy0wMjAwNS1NSkstNjItTWFpbiBEb2N1bWVudC5wZGZkAgUPPCsAEQMADxYEHwxnHwUCAWQBEBYBAgQWATwrAAUBABYCHw0FCFBsYW50aWZmFgFmDBQrAAAWAmYPZBYCAgEPZBYKZg8PFgIfAAUJMi8yMC8yMDI0ZGQCAQ8PFgIfAAUCNjJkZAICDw8WAh8ABQwyMy0wMjAwNS1NSktkZAIDDw8WAh8ABRRKdWRnZSBNaWNoZWxlIEouIEtpbWRkAgQPDxYCHwAFBERpbGxkZAIHDw8WAh8ABZQGVGhlIENvdXJ0IGRlbmllZCB0aGUgTW90aW9uIHRvIEVuZm9yY2UgU2V0dGxlbWVudCBmaWxlZCBieSBQbGFpbnRpZmYgYW5kIENyb3NzLU1vdGlvbiB0byBFbmZvcmNlIFNldHRsZW1lbnQgZmlsZWQgYnkgRGVmZW5kYW50LiBUaGUgcGFydGllcywgdGhyb3VnaCB0aGVpciBhdHRvcm5leXMsIGhhZCByZWFjaGVkIGEgc2V0dGxlbWVudCBhcyB0byBhIGxhcmdlIHBvcnRpb24gb2YgUGxhaW50aWZmJ3MgdW5zZWN1cmVkIGNsYWltIGFnYWluc3QgRGVmZW5kYW50LCBidXQgdGhlIHNldHRsZW1lbnQgd2FzIHNpbGVudCBhcyB0byB0aGUgdHJlYXRtZW50IG9mIHRoZSByZW1haW5kZXIgb2YgUGxhaW50aWZmJ3MgY2xhaW0uIFBsYWludGlmZiB1cmdlZCB0aGF0IGl0IHdvdWxkIGJlIHRyZWF0ZWQgYXMgdW5zZWN1cmVkOyBEZWZlbmRhbnQgY29udGVuZGVkIGl0IHdvdWxkIGJlIHJlbGVhc2VkLiBUaGUgQ291cnQgY29uY2x1ZGVkIHRoYXQgdGhlIHRyZWF0bWVudCBvZiB0aGUgcmVtYWluZGVyIG9mIHRoZSB1bnNlY3VyZWQgY2xhaW0gd2FzIGFuIGVzc2VudGlhbCB0ZXJtIG9mIHRoZSBzZXR0bGVtZW50LCBhbmQgdGhlIHBhcnRpZXMgZGlkIG5vdCByZWFjaCBhbiBhZ3JlZW1lbnQgb24gdGhpcyB0ZXJtLiBBY2NvcmRpbmdseSwgYmVjYXVzZSB0aGUgcGFydGllcyBkaWQgbm90IGFncmVlIG9uIGFsbCBlc3NlbnRpYWwgdGVybXMgb2YgdGhlIHB1cnBvcnRlZCBzZXR0bGVtZW50LCBubyBzZXR0bGVtZW50IHdhcyByZWFjaGVkIGFuZCB0aGUgcGFydGllcycgbW90aW9ucyB3ZXJlIGRlbmllZC5kZAIKDxUBAGQCCw8PFgIfCwVZaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL21qay8yMy0wMjAwNS1NSkstNjItTWFpbiBEb2N1bWVudC5wZGZkFgJmDxUBWWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9tamsvMjMtMDIwMDUtTUpLLTYyLU1haW4gRG9jdW1lbnQucGRmZAIMDxUCFDIvMjIvMjAyNCA5OjAxOjAxIEFNATBkAgEPDxYCHwAFITIzLTAyMDA1LU1KSy02Mi1NYWluIERvY3VtZW50LnBkZmRkAgIPDxYCHwAFFDIvMjIvMjAyNCA5OjAxOjAxIEFNZGQCBQ9kFgZmD2QWDAIDDw8WAh8LBYMCaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL21qay8yMi01MDMwMi1NSkstNTQtTWFpbiBEb2N1bWVudC5wZGYjeG1sPWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3Yvc2VhcmNoX3ZiL1BkZkhpZ2hsaWdodGVyLmFzcHg%%2FRG9jSWQ9NjAwJkluZGV4PUMlM2ElNWNpbmV0cHViJTVjd3d3cm9vdCU1Y2R0U2VhcmNoJTVjaW5kZXhlcyU1Y0FsbCUyMEJhbmtydXB0Y3klMjBKdWRnZXMmSGl0Q291bnQ9MCZoaXRzPWQWAmYPFQEiMTgtNTA1ODQtTUpLLTEyMy1NYWluIERvY3VtZW50LnBkZmQCBQ88KwARAwAPFgQfDGcfBQIBZAEQFgAWABYADBQrAAAWAmYPZBYCAgEPZBYKZg8PFgIfAAUJNy8xMS8yMDI0ZGQCAQ8PFgIfAAUDMTIzZGQCAg8PFgIfAAUMMTgtNTA1ODQtTUpLZGQCAw8PFgIfAAUaQ2hpZWYgSnVkZ2UgTWljaGVsZSBKLiBLaW1kZAIEDw8WAh8ABQVFdmFuc2RkAgcPDxYCHwAFgAdUaGUgQ291cnQgZ3JhbnRlZCBhIGNyZWRpdG9yJ3MgbW90aW9uIGZvciByZWxpZWYgZnJvbSBzdGF5LiBUaGUgY3JlZGl0b3IgaGVsZCBhIGNsYWltIHNlY3VyZWQgYnkgYSB2ZWhpY2xlIG93bmVkIHNvbGVseSBieSB0aGUgZGVjZWFzZWQgZGVidG9yLWh1c2JhbmQtLXdobyB3YXMgZGlzbWlzc2VkIGZyb20gdGhlIGNhc2UgYWZ0ZXIgaGlzIGRlYXRoLS1hbmQgc291Z2h0IHRvIHJlcG9zc2VzcyB0aGUgdmVoaWNsZSBmcm9tIHRoZSBzdXJ2aXZpbmcgZGVidG9yLXdpZmUuIFRoZSBDb3VydCBmb3VuZCB0aGF0IGFmdGVyIHRoZSBkZWJ0b3ItaHVzYmFuZCB3YXMgZGlzbWlzc2VkIGZyb20gdGhlIGNhc2UsIHRoZSB0ZXJtcyBvZiB0aGUgcGxhbiB0aGF0IGNvbmNlcm5lZCBvbmx5IHRoZSBkZWJ0b3ItaHVzYmFuZCBhbmQgaGlzIGxpYWJpbGl0aWVzLCBzdWNoIGFzIHRoZSBjcmVkaXRvcidzIHRyZWF0bWVudCB1bmRlciB0aGUgcGxhbiwgd2VyZSBubyBsb25nZXIgYmluZGluZyBiZWNhdXNlIG9uY2UgdGhlIGRlYnRvci1odXNiYW5kIHdhcyBkaXNtaXNzZWQsIHRoZSBwcmUtYmFua3J1cHRjeSBzdGF0dXMgcXVvIHdhcyByZXN0b3JlZCBhcyB0byBoaXMgc2VwYXJhdGUgYXNzZXRzIGFuZCBsaWFiaWxpdGllcy4gVGhlIGRlYnRvci13aWZlIGhhZCBvbmx5IGEgcG9zc2Vzc29yeSBpbnRlcmVzdCBpbiB0aGUgdmVoaWNsZSBhbmQgd2FzIG5vdCBwYXlpbmcgdGhlIGNyZWRpdG9yJ3MgY2xhaW0gaW4gZnVsbC4gVGhlIENvdXJ0IGNvbmNsdWRlZCB0aGF0IHRoZSBjcmVkaXRvciBoYWQgZXN0YWJsaXNoZWQgYSBwcmltYSBmYWNpZSBzaG93aW5nIG9mIGNhdXNlIGZvciBzdGF5IHJlbGllZiwgYW5kIHRoZSBkZWJ0b3Itd2lmZSBoYWQgbm90IG92ZXJjb21lIHN1Y2ggYSBzaG93aW5nLmRkAgoPFQEAZAILDw8WAh8LBVpodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvbWprLzE4LTUwNTg0LU1KSy0xMjMtTWFpbiBEb2N1bWVudC5wZGZkFgJmDxUBWmh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9tamsvMTgtNTA1ODQtTUpLLTEyMy1NYWluIERvY3VtZW50LnBkZmQCDA8VAhQzLzI0LzIwMjUgOTowMDoyNiBBTQEwZAIBDw8WAh8ABSIxOC01MDU4NC1NSkstMTIzLU1haW4gRG9jdW1lbnQucGRmZGQCAg8PFgIfAAUUMy8yNC8yMDI1IDk6MDA6MjYgQU1kZAIJD2QWBmYPZBYMAgMPDxYCHwsFggJodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvZWpjLzIzLTYwMzE3LUVKQy00My1NYWluIERvY3VtZW50LnBkZiN4bWw9aHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi9zZWFyY2hfdmIvUGRmSGlnaGxpZ2h0ZXIuYXNweD9Eb2NJZD04OCZJbmRleD1DJTNhJTVjaW5ldHB1YiU1Y3d3d3Jvb3QlNWNkdFNlYXJjaCU1Y2luZGV4ZXMlNWNBbGwlMjBCYW5rcnVwdGN5JTIwSnVkZ2VzJkhpdENvdW50PTAmaGl0cz1kFgJmDxUBITIzLTYwMzE3LUVKQy00My1NYWluIERvY3VtZW50LnBkZmQCBQ88KwARAwAPFgQfDGcfBQIBZAEQFgAWABYADBQrAAAWAmYPZBYCAgEPZBYKZg8PFgIfAAUKMTEvMTgvMjAyNGRkAgEPDxYCHwAFAjQzZGQCAg8PFgIfAAUMMjMtNjAzMTctRUpDZGQCAw8PFgIfAAUcSnVkZ2UgRWR3YXJkIEouIENvbGVtYW4sIElJSWRkAgQPDxYCHwAFBkFudG1hbmRkAgcPDxYCHwBlZGQCCg8VAQBkAgsPDxYCHwsFWWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9lamMvMjMtNjAzMTctRUpDLTQzLU1haW4gRG9jdW1lbnQucGRmZBYCZg8VAVlodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvZWpjLzIzLTYwMzE3LUVKQy00My1NYWluIERvY3VtZW50LnBkZmQCDA8VAhUxMS8yMC8yMDI0IDk6MDA6MDQgQU0BMGQCAQ8PFgIfAAUhMjMtNjAzMTctRUpDLTQzLU1haW4gRG9jdW1lbnQucGRmZGQCAg8PFgIfAAUVMTEvMjAvMjAyNCA5OjAwOjA0IEFNZGQCCg9kFgZmD2QWDAIDDw8WAh8LBYICaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL2VqYy8yMy02MDMxNy1FSkMtNDEtTWFpbiBEb2N1bWVudC5wZGYjeG1sPWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3Yvc2VhcmNoX3ZiL1BkZkhpZ2hsaWdodGVyLmFzcHg%2FRG9jSWQ9ODcmSW5kZXg9QyUzYSU1Y2luZXRwdWIlNWN3d3dyb290JTVjZHRTZWFyY2glNWNpbmRleGVzJTVjQWxsJTIwQmFua3J1cHRjeSUyMEp1ZGdlcyZIaXRDb3VudD0wJmhpdHM9ZBYCZg8VASEyMy02MDMxNy1FSkMtNDEtTWFpbiBEb2N1bWVudC5wZGZkAgUPPCsAEQMADxYEHwxnHwUCAWQBEBYAFgAWAAwUKwAAFgJmD2QWAgIBD2QWCmYPDxYCHwAFCjExLzE0LzIwMjRkZAIBDw8WAh8ABQI0MWRkAgIPDxYCHwAFDDIzLTYwMzE3LUVKQ2RkAgMPDxYCHwAFHEp1ZGdlIEVkd2FyZCBKLiBDb2xlbWFuLCBJSUlkZAIEDw8WAh8ABQZBbnRtYW5kZAIHDw8WAh8ABeoKVGhlIERlYnRvciBpbiB0aGlzIENoYXB0ZXIgMTMgY2FzZSBjbGFpbWVkIGEgJDQzLDAwMC4wMCBob21lc3RlYWQgZXhlbXB0aW9uIGluIGhlciBwZXJzb25hbCByZXNpZGVuY2UuIFVuZGVyIEdlb3JnaWHigJlzIGV4ZW1wdGlvbiBzdGF0dXRlLCBhIGRlYnRvciBtYXkgZXhlbXB0IGhlciDigJxhZ2dyZWdhdGUgaW50ZXJlc3QsIG5vdCB0byBleGNlZWQgJDIxLDUwMC4wMCBpbiB2YWx1ZSwgaW4gcmVhbCBwcm9wZXJ0eSBvciBwZXJzb25hbCBwcm9wZXJ0eSB0aGF0IHRoZSBkZWJ0b3IgLiAuIC4gdXNlcyBhcyBhIHJlc2lkZW5jZS7igJ0gT3IsIOKAnFtpXW4gdGhlIGV2ZW50IHRpdGxlIHRvIHByb3BlcnR5IHVzZWQgZm9yIHRoZSBbaG9tZXN0ZWFkXSBleGVtcHRpb24gLiAuIC4gaXMgaW4gb25lIG9mIHR3byBzcG91c2VzIHdobyBpcyBhIGRlYnRvciwgdGhlIGFtb3VudCBvZiB0aGUgZXhlbXB0aW9uIC4gLiAuIHNoYWxsIGJlICQ0MywwMDAuMDAu4oCdIEhlcmUsIHRoZSBEZWJ0b3LigJlzIGZhdGhlciBpbiBoaXMgd2lsbCBsZWZ0IHRoZSBob21lIHRvIGhlciBhbmQgdG8gaGVyIHRocmVlIHNpYmxpbmdzLiBIZSBkaWVkIGluIDE5OTYsIGFuZCBubyBmdXJ0aGVyIGFjdGlvbiBoYXMgYmVlbiB0YWtlbiBpbiBoaXMgcHJvYmF0ZSBjYXNlIGluIDI4IHllYXJzLiBUaGUgRGVidG9yIGFuZCBoZXIgaHVzYmFuZCBoYXZlIGxpdmVkIGluIHRoZSBob21lIHNpbmNlIDE5OTkuIFRoZSBDaGFwdGVyIDEzIFRydXN0ZWUgb2JqZWN0ZWQgdG8gdGhlIERlYnRvcuKAmXMgY2xhaW1lZCAkNDMsMDAwLjAwIGRvdWJsZSBob21lc3RlYWQgZXhlbXB0aW9uIGZvciB0d28gcmVhc29ucy4gRmlyc3QsIHRoZSBUcnVzdGVlIGFyZ3VlZCB0aGF0IHRoZSBEZWJ0b3LigJlzIHBhcnRpYWwgaW50ZXJlc3QgaW4gdGhlIHJlYWwgcHJvcGVydHkgZGlkIG5vdCBzdWZmaWNlIHRvIHN1cHBvcnQgdGhlIGRvdWJsZSBleGVtcHRpb24uIFNlY29uZCwgdGhlIFRydXN0ZWUgYXJndWVkIHRoYXQgdGhlIHB1cnBvc2Ugb2YgdGhlIGRvdWJsZSBleGVtcHRpb24gaXMgdG8gcHJvdGVjdCBhIG5vbi1maWxpbmcgc3BvdXNl4oCZcyBlcXVpdGFibGUgaW50ZXJlc3QgYW5kIHRoYXQgaGVyZSB0aGUgRGVidG9y4oCZcyBodXNiYW5kIGhhZCBubyBpbnRlcmVzdCB0byBwcm90ZWN0LiBUaGUgQ291cnQgcmVqZWN0ZWQgdGhlIFRydXN0ZWXigJlzIGFyZ3VtZW50cywgZmluZGluZyB0aGF0IHRoZSBHZW9yZ2lhIGRvdWJsZSBob21lc3RlYWQgZXhlbXB0aW9uIGRvZXMgbm90IHJlcXVpcmUgdGhhdCB0aGUgRGVidG9yIGhhdmUgc29sZSBvd25lcnNoaXAgb2YgdGhlIHJlc2lkZW5jZSBvciB0aGF0IHRoZSBub24tZmlsaW5nIHNwb3VzZSBoYXZlIGFuIGVxdWl0YWJsZSBpbnRlcmVzdC4gZGQCCg8VAQBkAgsPDxYCHwsFWWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9lamMvMjMtNjAzMTctRUpDLTQxLU1haW4gRG9jdW1lbnQucGRmZBYCZg8VAVlodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvZWpjLzIzLTYwMzE3LUVKQy00MS1NYWluIERvY3VtZW50LnBkZmQCDA8VAhUxMS8xNS8yMDI0IDk6MDA6MDYgQU0BMGQCAQ8PFgIfAAUhMjMtNjAzMTctRUpDLTQxLU1haW4gRG9jdW1lbnQucGRmZGQCAg8PFgIfAAUVMTEvMTUvMjAyNCA5OjAwOjA2IEFNZGQCCw9kFgZmD2QWDAIDDw8WAh8LBYICaHR0cHM6Ly93d3cuZ2FzLnVzY291cnRzLmdvdi91c2JjL3B1Ymxpc2hlZG9waW5pb25zL2VqYy8yMS00MDc0OS1FSkMtNjAtTWFpbiBEb2N1bWVudC5wZGYjeG1sPWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3Yvc2VhcmNoX3ZiL1BkZkhpZ2hsaWdodGVyLmFzcHg%2FRG9jSWQ9ODImSW5kZXg9QyUzYSU1Y2luZXRwdWIlNWN3d3dyb290JTVjZHRTZWFyY2glNWNpbmRleGVzJTVjQWxsJTIwQmFua3J1cHRjeSUyMEp1ZGdlcyZIaXRDb3VudD0wJmhpdHM9ZBYCZg8VASEyMS00MDc0OS1FSkMtNjAtTWFpbiBEb2N1bWVudC5wZGZkAgUPPCsAEQMADxYEHwxnHwUCAWQBEBYAFgAWAAwUKwAAFgJmD2QWAgIBD2QWCmYPDxYCHwAFCTMvMjcvMjAyNGRkAgEPDxYCHwAFAjYwZGQCAg8PFgIfAAUMMjEtNDA3NDktRUpDZGQCAw8PFgIfAAUiQ2hpZWYgSnVkZ2UgRWR3YXJkIEouIENvbGVtYW4sIElJSWRkAgQPDxYCHwAFBkdpYnNvbmRkAgcPDxYCHwBlZGQCCg8VAQBkAgsPDxYCHwsFWWh0dHBzOi8vd3d3Lmdhcy51c2NvdXJ0cy5nb3YvdXNiYy9wdWJsaXNoZWRvcGluaW9ucy9lamMvMjEtNDA3NDktRUpDLTYwLU1haW4gRG9jdW1lbnQucGRmZBYCZg8VAVlodHRwczovL3d3dy5nYXMudXNjb3VydHMuZ292L3VzYmMvcHVibGlzaGVkb3BpbmlvbnMvZWpjLzIxLTQwNzQ5LUVKQy02MC1NYWluIERvY3VtZW50LnBkZmQCDA8VAhQzLzI5LzIwMjQgOTowMDoxOCBBTQEwZAIBDw8WAh8ABSEyMS00MDc0OS1FSkMtNjAtTWFpbiBEb2N1bWVudC5wZGZkZAICDw8WAh8ABRQzLzI5LzIwMjQgOTowMDoxOCBBTWRkGAsFHl9fQ29udHJvbHNSZXF1aXJlUG9zdEJhY2tLZXlfXxYCBQZQaG9uaWMFCFN0ZW1taW5nBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwNCRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwxMSRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwNyRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwOCRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwNSRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwOSRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwNiRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwwMyRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwxMCRHcmlkVmlldzEPPCsADAEIAgFkBSFTZWFyY2hSZXN1bHRzR3JpZCRjdGwxMiRHcmlkVmlldzEPPCsADAEIAgFkpmoH%2BGmS8RZWx6BYCoQTn0Te2ZS7nNIfgHoZk2LWRRU%3D&__VIEWSTATEGENERATOR=46A7D97C&__EVENTVALIDATION=%2FwEdACNeYY%2Bvi9hQ%2FPOsqBJrbm8WP1jLJHiqNfRsonZfptdXU3cMhiz54OirO2tTY2YNoZsvgbKyrOqsb9cXYU%2FyyNBmaBNaGqNy%2BF2BYdzT80QWmiki0j4%2BxuE8PBwQGQHP%2FaTFY9sSH%2BFYeuoBJjxjwT%2BxTegt%2BB51QD64n%2F%2BISTSBG834O%2FGfAV4V4n0wgFZHr3emi7Us9KEZhJ7P8audriSvJUxeBtj%2BkIEcsJMVND0%2FNcBAqaWIlOnFrA%2Be%2BF9iMajUT%2FIr4XOLUa%2FGzxCDHG8hq9enNsHnXZXGlTzI1pxkfgn6eBSbEmLRrvXh%2B56oeahQ658zPOWpoqtBxsGucJ2%2F9Eb8DUzVA%2Bn9FYiNg05KmX3cX%2BTv3rKtLZ%2BPyXxTmETR3uz8du8PkM0LixpIqO2Rm1l8qR09HuTaMQSg1sRaPGiXlaK0GkwyoVerWaYhGrlSH9GNEHpSQt4uBXVFIaZwkZy00Syppt1QBVkhPUaJlEjwEHTxJktNl3IwI8TrpUEHjs7PVNzYCwoyiNEWodSunyt9Q5baIeJRCKDyxu4PL4SqowTr5PuLXHxMDS9zIbXDTb7o3suZSoAjalnk%2BF68uOE4pYODWL3GmpWxFARGgzXywvZXAc2I7Sin2Rsgy333yUhV4e%2FlT8cdoUpbV%2F0NEvHulcIzxkQteAKNhNvalnwPJ5KjVjHUjR8TX90%2FhiQGiz7UDShwbajkefCTg04ls7cTJtNcv31mOHq24QFRbZum%2FfDGmkBw0k9r21y5Tump0cJ5nlreDrp%2BgHmh5OjL&JudgeID=C%3A%5Cinetpub%5Cwwwroot%5CdtSearch%5Cindexes%5CAll+Bankruptcy+Judges&SearchRequest=&SearchType=allwords&txtBegDate=1%2F1%2F2024&txtEndDate=12%2F31%2F2025&Fuzziness=0&ddSearchBy=Hits"

            html_page = requests.post(url=self.url, headers=headers,data=data2)
            self.html = html.fromstring(html_page.text)
            self._process_html()
            pages -=1

        for attr in self._all_attrs:
            self.__setattr__(attr, getattr(self, f"_get_{attr}")())

        self._clean_attributes()
        if "case_name_shorts" in self._all_attrs:
            self.case_name_shorts = self._get_case_name_shorts()
        self._post_parse()
        self._check_sanity()
        self._date_sort()
        self._make_hash()
        return 0

    def get_class_name(self):
        return "bank_sd_geo"

    def get_court_type(self):
        return "Bankruptcy"

    def get_state_name(self):
        return "11th Circuit"

    def get_court_name(self):
        return "Bankruptcy Court Southern District of Georgia"
